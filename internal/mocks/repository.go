// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -package mocks -destination ../mocks/repository.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	repository "github.com/siyoga/jwt-auth-boilerplate/internal/repository"
	models "github.com/siyoga/jwt-auth-boilerplate/internal/repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback")
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// Txm mocks base method.
func (m *MockTransaction) Txm() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txm")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// Txm indicates an expected call of Txm.
func (mr *MockTransactionMockRecorder) Txm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txm", reflect.TypeOf((*MockTransaction)(nil).Txm))
}

// MockTxRepository is a mock of TxRepository interface.
type MockTxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepositoryMockRecorder
	isgomock struct{}
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository.
type MockTxRepositoryMockRecorder struct {
	mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance.
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
	mock := &MockTxRepository{ctrl: ctrl}
	mock.recorder = &MockTxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
	return m.recorder
}

// StartTransaction mocks base method.
func (m *MockTxRepository) StartTransaction(ctx context.Context) (*models.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(*models.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTxRepositoryMockRecorder) StartTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTxRepository)(nil).StartTransaction), ctx)
}

// MockJwtRepository is a mock of JwtRepository interface.
type MockJwtRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJwtRepositoryMockRecorder
	isgomock struct{}
}

// MockJwtRepositoryMockRecorder is the mock recorder for MockJwtRepository.
type MockJwtRepositoryMockRecorder struct {
	mock *MockJwtRepository
}

// NewMockJwtRepository creates a new mock instance.
func NewMockJwtRepository(ctrl *gomock.Controller) *MockJwtRepository {
	mock := &MockJwtRepository{ctrl: ctrl}
	mock.recorder = &MockJwtRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtRepository) EXPECT() *MockJwtRepositoryMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockJwtRepository) AddToken(ctx context.Context, tx repository.Transaction, token models.Token) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", ctx, tx, token)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToken indicates an expected call of AddToken.
func (mr *MockJwtRepositoryMockRecorder) AddToken(ctx, tx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockJwtRepository)(nil).AddToken), ctx, tx, token)
}

// CheckToken mocks base method.
func (m *MockJwtRepository) CheckToken(ctx context.Context, tx repository.Transaction, number int64, userId string) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", ctx, tx, number, userId)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockJwtRepositoryMockRecorder) CheckToken(ctx, tx, number, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockJwtRepository)(nil).CheckToken), ctx, tx, number, userId)
}

// DropToken mocks base method.
func (m *MockJwtRepository) DropToken(ctx context.Context, tx repository.Transaction, userId string, number int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropToken", ctx, tx, userId, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropToken indicates an expected call of DropToken.
func (mr *MockJwtRepositoryMockRecorder) DropToken(ctx, tx, userId, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropToken", reflect.TypeOf((*MockJwtRepository)(nil).DropToken), ctx, tx, userId, number)
}

// FindNumber mocks base method.
func (m *MockJwtRepository) FindNumber(ctx context.Context, tx repository.Transaction, userId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNumber", ctx, tx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNumber indicates an expected call of FindNumber.
func (mr *MockJwtRepositoryMockRecorder) FindNumber(ctx, tx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNumber", reflect.TypeOf((*MockJwtRepository)(nil).FindNumber), ctx, tx, userId)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckUserExist mocks base method.
func (m *MockUserRepository) CheckUserExist(ctx context.Context, tx repository.Transaction, email, username string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", ctx, tx, email, username)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExist indicates an expected call of CheckUserExist.
func (mr *MockUserRepositoryMockRecorder) CheckUserExist(ctx, tx, email, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExist), ctx, tx, email, username)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, tx repository.Transaction, user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, tx, user)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(ctx context.Context, tx repository.Transaction, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, tx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(ctx, tx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), ctx, tx, email)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(ctx context.Context, tx repository.Transaction, userId string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, tx, userId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(ctx, tx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), ctx, tx, userId)
}
